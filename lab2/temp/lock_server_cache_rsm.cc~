// the caching lock server implementation

#include "lock_server_cache_rsm.h"
#include <sstream>
#include <stdio.h>
#include <unistd.h>
#include <arpa/inet.h>
#include "lang/verify.h"
#include "handle.h"
#include "tprintf.h"


static void *
revokethread(void *x)
{
  lock_server_cache_rsm *sc = (lock_server_cache_rsm *) x;
  sc->revoker();
  return 0;
}

static void *
retrythread(void *x)
{
  lock_server_cache_rsm *sc = (lock_server_cache_rsm *) x;
  sc->retryer();
  return 0;
}

lock_server_cache_rsm::lock_server_cache_rsm(class rsm *_rsm) 
  : rsm (_rsm)
{
  pthread_t th;
  int r = pthread_create(&th, NULL, &revokethread, (void *) this);
  VERIFY (r == 0);
  r = pthread_create(&th, NULL, &retrythread, (void *) this);
  VERIFY (r == 0);
}

void
lock_server_cache_rsm::revoker()
{

  // This method should be a continuous loop, that sends revoke
  // messages to lock holders whenever another client wants the
  // same lock
	while(true) {
		revoke_retry_entry e;
		revoke_queue.deq(&e);
		
		if (rsm->amiprimary()) {
			int r;
			rpcc *cl = handle(e.id).safebind();
			VERIFY(cl != NULL);
			cl->call(lock_protocol::revoke, e.lid, e.xid, r);
		}
	}
}


void
lock_server_cache_rsm::retryer()
{

  // This method should be a continuous loop, waiting for locks
  // to be released and then sending retry messages to those who
  // are waiting for it.
	while(true) {
		revoke_retry_entry e;
		retry_queue.deq(&e);

		if (rsm->amiprimary()) {
			int r;
			rpcc *cl = handle(e.id).safebind();
			VERIFY(cl != NULL);
			cl->call(lock_protocol::retry, e.lid, e.xid, r);
		}
	}
}


int lock_server_cache_rsm::acquire(lock_protocol::lockid_t lid, std::string id, 
             lock_protocol::xid_t xid, int &)
{
	bool revoke = false;
	lock_protocol::status ret = lock_protocol::OK;
	std::map<lock_protocol::lockid_t, lock_entry>::iterator iter;
	pthread_mutex_lock(&server_mutex);
	iter = lockmap.find(lid);
	if (iter == lockmap.end()){ 
		iter = lockmap.insert(std::make_pair(lid, lock_entry())).first;
	}

	lock_entry& le = iter->second;
	client_xid_map::iterator xid_iter= le.highest_xid_from_client.find(id);
	
	if (xid_iter == le.highest_xid_from_client.end() || xid_iter->second < xid) {
		
		le.highest_xid_from_client[id] = xid;
		le.highest_xid_release_reply.erase(id);

		switch(iter->second.state) {
		
			case FREE:
				iter->second.state = LOCKED;
				iter->second.owner = id;
				break;
		
			case LOCKED:
				iter->second.state = LOCKED_AND_WAIT;
				iter->second.waitset.insert(id);
				revoke_queue.enq(iter->second.owner, lid, le.highest_xid_from_client[iter->second.owner])
				revoke = true;
				ret = lock_protocol::RETRY;
				break;
		
			case LOCKED_AND_WAIT:
				iter->second.waitset.insert(id);
				ret = lock_protocol::RETRY;
				break;
		
			case RETRYING:
				if (iter->second.waitset.count(id)) {
					iter->second.waitset.erase(id);
					iter->second.owner = id;
					if(iter->second.waitset.size()) {
						iter->second.state = LOCKED_AND_WAIT;
						revoke = true;
						revoke_queue.enq(revoke_retry_entry(iter->second.owner, lid, le.highest_xid_from_client[iter->second.owner]));	
					}
					else
						iter->second.state = LOCKED;
				} else {
					iter->second.waitset.insert(id);
					ret = lock_protocol::RETRY;
				}
				break;
		
			default:
				break;
		}
		le.highest_xid_acquire_reply[id] = ret;
	} else if (xid_iter->second == xid) {
		ret = le.highest_xid_acquire_reply[id];	
	} else {
		//xid_iter->second > xid
		printf("ERROR: received acquire with old xid. Highest seen: %lld, current xid: %lld\n", xid_iter->second, 		xid);		ret = lock_protocol::RPCERR;
	}	
	
	pthread_mutex_unlock(&server_mutex);
	
	return ret;
}

int 
lock_server_cache_rsm::release(lock_protocol::lockid_t lid, std::string id, 
         lock_protocol::xid_t xid, int &r)
{
	bool retry = false;
	std::string client_need_retry;
	lock_protocol::status ret = lock_protocol::OK;
	std::map<lock_protocol::lockid_t, lock_entry>::iterator iter;
	pthread_mutex_lock(&server_mutex);
	iter = lockmap.find(lid);
	if (iter == lockmap.end()) {
		printf("ERROR: can't find lock with lockid = %d\n", lid);
		return lock_protocol::NOENT;
	} 
	
	lock_entry &le = iter->second;
	
	client_xid_map::iterator xid_iter = le.highest_xid_from_client.find(id);
	VERIFY(xid <= xid_iter->second); 
	if (xid_iter != le.highest_xid_from_client.end() && xid == xid_iter->second) {
		
		client_reply_map::iterator::reply_iter = le.highest_xid_release_reply.find(id);
		
		if (reply_iter == le.highest_xid_release_reply.end()) {
			
			if (iter->second.owner != id) {
				ret = lock_protocol::IOERR;
         	 		le.highest_xid_release_reply.insert(make_pair(id, ret));
          			printf("ERROR: received release from client not holding the lock.\n");			
			}	
			switch(iter->second.state) {
				case FREE:
					printf("ERROR: can't release a lock with state FREE\n");
					ret = lock_protocol::IOERR;
					break;
		
				case LOCKED:
					iter->second.state = FREE;
					iter->second.owner = "";
					break;
			
				case LOCKED_AND_WAIT:
					iter->second.state = RETRYING;
					iter->second.owner = "";
					client_need_retry = *iter->second.waitset.begin();
					retry = true;
					retry_queue.enq(revoke_retry_entry(client_need_retry, lid, le.highest_xid_from_client[client_need_retry]));
					break;
				
				case RETRYING:
					ret = lock_protocol::IOERR;
					printf("ERROR: can't releaer a lock with state RETRYING\n");
					break;
			
				default:
					break;	
			}
			le.highest_xid_release_reply.insert(make_pair(id, ret));
		} else {
			ret = reply_iter->second;		
		}
	} else if (xid < xid_iter->second) {
		printf("ERROR: received release with incorrect xid. xid: %lld, highest acquire xid: %lld\n", xid, xid_iter->second);
      		ret = lock_protocol::RPCERR;
	} else {
		//(xid_iter == le.highest_xid_from_client.end()
		printf("ERROR: received release for lock with no recorded xid for this client.\n");
      		ret = lock_protocol::RPCERR;
	}
	pthread_mutex_unlock(&server_mutex);
			
	return ret;

  lock_protocol::status ret = lock_protocol::OK;
  return ret;
}

std::string
lock_server_cache_rsm::marshal_state()
{
  std::ostringstream ost;
  std::string r;
  return r;
}

void
lock_server_cache_rsm::unmarshal_state(std::string state)
{
	
}

lock_protocol::status
lock_server_cache_rsm::stat(lock_protocol::lockid_t lid, int &r)
{
  printf("stat request\n");
  r = nacquire;
  return lock_protocol::OK;
}

